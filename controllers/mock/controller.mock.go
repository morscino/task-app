// Code generated by MockGen. DO NOT EDIT.
// Source: ./controllers/controller.go

// Package mock_controllers is a generated GoMock package.
package mock_controllers

import (
	reflect "reflect"
	middleware "task-app/common/middleware"
	models "task-app/models"

	gomock "github.com/golang/mock/gomock"
)

// MockOperations is a mock of Operations interface.
type MockOperations struct {
	ctrl     *gomock.Controller
	recorder *MockOperationsMockRecorder
}

// MockOperationsMockRecorder is the mock recorder for MockOperations.
type MockOperationsMockRecorder struct {
	mock *MockOperations
}

// NewMockOperations creates a new mock instance.
func NewMockOperations(ctrl *gomock.Controller) *MockOperations {
	mock := &MockOperations{ctrl: ctrl}
	mock.recorder = &MockOperationsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOperations) EXPECT() *MockOperationsMockRecorder {
	return m.recorder
}

// CreateTask mocks base method.
func (m *MockOperations) CreateTask(data *models.CreateTaskDto, user *models.User) *models.ResponseObject {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", data, user)
	ret0, _ := ret[0].(*models.ResponseObject)
	return ret0
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockOperationsMockRecorder) CreateTask(data, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockOperations)(nil).CreateTask), data, user)
}

// DeleteTask mocks base method.
func (m *MockOperations) DeleteTask(user *models.User, taskId string) *models.ResponseObject {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTask", user, taskId)
	ret0, _ := ret[0].(*models.ResponseObject)
	return ret0
}

// DeleteTask indicates an expected call of DeleteTask.
func (mr *MockOperationsMockRecorder) DeleteTask(user, taskId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTask", reflect.TypeOf((*MockOperations)(nil).DeleteTask), user, taskId)
}

// GetAllTasks mocks base method.
func (m *MockOperations) GetAllTasks(user *models.User, query *models.APIPagingDto) *models.ResponseObject {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTasks", user, query)
	ret0, _ := ret[0].(*models.ResponseObject)
	return ret0
}

// GetAllTasks indicates an expected call of GetAllTasks.
func (mr *MockOperationsMockRecorder) GetAllTasks(user, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTasks", reflect.TypeOf((*MockOperations)(nil).GetAllTasks), user, query)
}

// GetTaskById mocks base method.
func (m *MockOperations) GetTaskById(user *models.User, taskId string) *models.ResponseObject {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskById", user, taskId)
	ret0, _ := ret[0].(*models.ResponseObject)
	return ret0
}

// GetTaskById indicates an expected call of GetTaskById.
func (mr *MockOperationsMockRecorder) GetTaskById(user, taskId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskById", reflect.TypeOf((*MockOperations)(nil).GetTaskById), user, taskId)
}

// Login mocks base method.
func (m *MockOperations) Login(data *models.SignInDto) *models.ResponseObject {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", data)
	ret0, _ := ret[0].(*models.ResponseObject)
	return ret0
}

// Login indicates an expected call of Login.
func (mr *MockOperationsMockRecorder) Login(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockOperations)(nil).Login), data)
}

// MarkTaskAsCompleted mocks base method.
func (m *MockOperations) MarkTaskAsCompleted(user *models.User, taskId string) *models.ResponseObject {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkTaskAsCompleted", user, taskId)
	ret0, _ := ret[0].(*models.ResponseObject)
	return ret0
}

// MarkTaskAsCompleted indicates an expected call of MarkTaskAsCompleted.
func (mr *MockOperationsMockRecorder) MarkTaskAsCompleted(user, taskId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkTaskAsCompleted", reflect.TypeOf((*MockOperations)(nil).MarkTaskAsCompleted), user, taskId)
}

// Middleware mocks base method.
func (m *MockOperations) Middleware() *middleware.Middleware {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Middleware")
	ret0, _ := ret[0].(*middleware.Middleware)
	return ret0
}

// Middleware indicates an expected call of Middleware.
func (mr *MockOperationsMockRecorder) Middleware() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Middleware", reflect.TypeOf((*MockOperations)(nil).Middleware))
}

// RegisterUser mocks base method.
func (m *MockOperations) RegisterUser(data *models.SignUpDto) *models.ResponseObject {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", data)
	ret0, _ := ret[0].(*models.ResponseObject)
	return ret0
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockOperationsMockRecorder) RegisterUser(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockOperations)(nil).RegisterUser), data)
}

// UpdateTaskbyId mocks base method.
func (m *MockOperations) UpdateTaskbyId(user *models.User, taskId string, data *models.UpdateTaskDto) *models.ResponseObject {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTaskbyId", user, taskId, data)
	ret0, _ := ret[0].(*models.ResponseObject)
	return ret0
}

// UpdateTaskbyId indicates an expected call of UpdateTaskbyId.
func (mr *MockOperationsMockRecorder) UpdateTaskbyId(user, taskId, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTaskbyId", reflect.TypeOf((*MockOperations)(nil).UpdateTaskbyId), user, taskId, data)
}
